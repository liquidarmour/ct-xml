@(boxRetriever: uk.gov.hmrc.ct.accounts.frs105.retriever.Frs105AccountsBoxRetriever with uk.gov.hmrc.ct.box.retriever.FilingAttributesBoxValueRetriever,
returnType: uk.gov.hmrc.ct.version.ReturnType,
accountsApproval: uk.gov.hmrc.ct.accounts.approval.boxes.AccountsApproval)(implicit messages: Messages)

@import uk.gov.hmrc.ct.version.ReturnType

@import uk.gov.hmrc.ct.xml.accounts.frs10x.components.xml._
@import uk.gov.hmrc.ct.xml.accounts.frs105.footnotes.xml._
@import uk.gov.hmrc.ct.xml.helpers.accounts.frs105.AccountsRendering
@import uk.gov.hmrc.ct.xml.accounts.frs10x.xml._
@import uk.gov.hmrc.ct.xml.accounts.frs105.xml._

@pagesToRender = @{
        import AccountsRendering.NoteType._

        val documentState = new uk.gov.hmrc.ct.xml.helpers.DocumentState()
        val titlePage = frs10xTitlePage(boxRetriever, documentState)
        val contentsPageIndex = documentState.getNextPageNumber

        val pagesToRender = scala.collection.mutable.ListBuffer(
            frs10xCompanyInformation(boxRetriever, documentState, accountsApproval),
            frs10xDirectorsReport(boxRetriever, documentState, returnType, accountsApproval),
            frs105ProfitAndLoss(boxRetriever, documentState, returnType),
            frs105BalanceSheet(boxRetriever, documentState, accountsApproval)
        )

        val notesToRender = AccountsRendering.getVisibleNotes(boxRetriever).flatMap {
            case CommitmentsByWayOfGuarantee => Some(commitmentsByWayOfGuaranteeNote(boxRetriever, documentState))
            case AdvancesAndCredits => Some(advancesAndCreditsNote(boxRetriever, documentState))
            case _ => throw new UnsupportedOperationException("Trying to render unknown note.")
        }

        Seq(frs10xAccountsHeader(boxRetriever, returnType, accountsApproval),
            titlePage,
            frs10xContentsPage(boxRetriever, documentState, contentsPageIndex)) ++ pagesToRender ++ notesToRender
        }



<div class="wholedoc" id="microAccounts">
    @for(page <- pagesToRender) {
    @page
    }
</div>
